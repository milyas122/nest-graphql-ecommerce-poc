# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Product {
  id: String!
  title: String!
  description: String!
  price: Int!
  stock: Int!
  seller: User
  productOrders: [ProductOrder!]!
}

type ProductOrder {
  id: String!
  quantity: Int!
  total_price: Int!
}

type Order {
  id: String!
  order_id: String!
  status: String!
  created_at: DateTime!
  updated_at: DateTime!
  buyer: User!
  seller: User!
  productOrders: [ProductOrder!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: String
  email: String!
  name: String!
  role: String!
  password: String
  products: [Product!]!
  buyerOrders: [Order!]!
  sellerOrders: [Order!]!
}

type BaseResponseDto {
  status: Int!
  message: String!
}

type GetOrderHistory {
  current_page: Int!
  total_pages: Int!
  total: Int!
  orders: [Order!]!
}

type GetOrderHistoryPayload {
  status: Int!
  message: String!
  data: GetOrderHistory!
}

type OrderDetail {
  id: String!
  order_id: String!
  status: String!
  created_at: DateTime!
  updated_at: DateTime!
  productOrders: [ProductOrder!]!
}

type OrderDetailPayload {
  status: Int!
  message: String!
  data: OrderDetail!
}

type CancelOrder {
  id: String!
  order_id: String!
  status: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type CancelOrderPayload {
  status: Int!
  message: String!
  data: CancelOrder!
}

type UpdateOrderStatus {
  id: String!
  order_id: String!
  status: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type UpdateOrderStatusPayload {
  status: Int!
  message: String!
  data: UpdateOrderStatus!
}

type CreateUser {
  sub: String!
  email: String!
  name: String!
  role: UserRole!
}

enum UserRole {
  ADMIN
  SELLER
  BUYER
}

type LoginUser {
  user: CreateUser!
  access_token: String!
}

type LoginUserPayload {
  status: Int!
  message: String!
  data: LoginUser!
}

type RegisterUser {
  user: CreateUser!
  access_token: String!
}

type RegisterUserPayload {
  status: Int!
  message: String!
  data: RegisterUser!
}

type JwtPayload {
  id: String!
  email: String!
  name: String!
  role: String!
}

type GetProductList {
  current_page: Int!
  total_pages: Int!
  total: Int!
  products: [Product!]!
}

type GetProductListPayload {
  status: Int!
  message: String!
  data: GetProductList!
}

type GetProduct {
  id: String!
  title: String!
  description: String!
  price: Int!
  stock: Int!
  seller: JwtPayload!
}

type GetProductDetailPayload {
  status: Int!
  message: String!
  data: GetProduct!
}

type CreateProduct {
  id: String!
  title: String!
  description: String!
  price: Int!
  stock: Int!
}

type CreateProductPayload {
  status: Int!
  message: String!
  data: CreateProduct!
}

type Query {
  getProducts(page: Int!): GetProductListPayload
  getProductDetail(id: String!): GetProductDetailPayload!
  sayHello: String!
  getOrderHistory(page: Int = 1, q: String): GetOrderHistoryPayload!
  getOrderDetail(id: String!): OrderDetailPayload!
}

type Mutation {
  removeProduct(id: String!): BaseResponseDto!
  createProduct(createProductInput: CreateProductInput!): CreateProductPayload!
  updateProduct(id: String!, updateProductInput: UpdateProductInput!): BaseResponseDto!
  loginUser(loginData: LoginUserInput!): LoginUserPayload!
  signupUser(createUserData: CreateUserInput!): RegisterUserPayload!
  registerSeller(createUserData: CreateUserInput!): RegisterUserPayload!
  createOrder(createOrderInput: CreateOrderInput!): String!
  cancelOrder(id: String!): CancelOrderPayload!
  updateOrderStatus(id: String!, updateOrderStatusInput: UpdateOrderStatusInput!): UpdateOrderStatusPayload!
}

input CreateProductInput {
  title: String!
  description: String!
  price: Int!
  stock: Int!
}

input UpdateProductInput {
  title: String
  description: String
  price: Int
  stock: Int
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

input CreateOrderInput {
  products: [ProductOrderItemInput!]
}

input ProductOrderItemInput {
  productId: String!
  quantity: Int! = 1
}

input UpdateOrderStatusInput {
  status: OrderStatus!
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}